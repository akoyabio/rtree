{
    "collab_server" : "",
    "contents" : "Rcpp::loadModule(\"rtreecpp\", TRUE)\n\n#' Create an RTree\n#'\n#' Organizes points in an R-tree.\n#'\n#' The R-tree is created using the quadratic splitting algorithm, with the maximum number of elements\n#' per node set to 16. See \\url{http://www.boost.org/doc/libs/1_63_0/libs/geometry/doc/html/geometry/spatial_indexes/introduction.html} for details.\n#'\n#' @param x A 2-column numeric matrix of point coordinates.\n#'\n#' @return An RTree S3 object.\n#'\n#' @export\nRTree <- function(x) {\n\n  if (!is.numeric(x)) {\n    stop('x must be numeric.')\n  }\n  if (length(dim(x)) != 2 | dim(x)[2] != 2) {\n    stop('x must be a 2-column matrix.')\n  }\n\n  rTreeCpp <- new(RTreeCpp, x)\n  me <- list(\n    rTreeCpp = rTreeCpp\n  )\n\n  class(me) <- append(class(me), \"RTree\")\n  return(me)\n}\n\n#' Get Points Within Distance\n#'\n#' For each point \\eqn{y_i} in set \\code{y}, returns the row-indices of the points indexed in \\code{rTree}\n#' that are within a given \\code{distance} of \\eqn{y_i}.\n#'\n#' @param rTree An \\link{RTree} object.\n#' @param y A 2-column numeric matrix of point coordinates.\n#' @param distance A positive scalar.\n#'\n#' @export\nwithinDistance <- function(rTree, y, distance) {\n  UseMethod(\"withinDistance\", rTree)\n}\n\nwithinDistance.RTree <- function(rTree, y, distance) {\n\n  if (!inherits(rTree, \"RTree\")) {\n    stop('rTree must be of class RTree.')\n  }\n  if (!is.numeric(y)) {\n    stop('y must be numeric.')\n  }\n  if (length(dim(y)) != 2 | dim(y)[2] != 2) {\n    stop('y must be a 2-column matrix.')\n  }\n  if (!is.numeric(distance)) {\n    stop('distance must be numeric.')\n  }\n  if (length(distance) != 1) {\n    stop('distance must be a scalar.')\n  }\n  if (distance <= 0) {\n    stop('distance must be positive.')\n  }\n\n  index.ls <- rTree$rTreeCpp$within_distance_list(y, distance)\n\n  return(index.ls)\n}\n\n#' Get Nearest Neighbors\n#'\n#' For each point \\eqn{y_i} in set \\code{y}, returns the row-indices of the \\code{k} points indexed in \\code{rTree}\n#' that are closest to \\eqn{y_i}.\n#'\n#' @param rTree An \\link{RTree} object.\n#' @param y A 2-column numeric matrix of point coordinates.\n#' @param k A positive integer.\n#'\n#' @export\nknn <- function(rTree, y, k) {\n  UseMethod(\"knn\", rTree)\n}\n\nknn.RTree <- function(rTree, y, k) {\n\n  if (!inherits(rTree, \"RTree\")) {\n    stop('rTree must be of class RTree.')\n  }\n  if (!is.numeric(y)) {\n    stop('y must be numeric.')\n  }\n  if (length(dim(y)) != 2 | dim(y)[2] != 2) {\n    stop('y must be a 2-column matrix.')\n  }\n  if (!is.numeric(k)) {\n    stop('k must be numeric.')\n  }\n  if (!is.integer(k)) {\n    k <- as.integer(k)\n    warning('k was cast to integer, this may lead to unexpected results.')\n  }\n  if (length(k) != 1) {\n    stop('k must be a scalar.')\n  }\n  if (k <= 0) {\n    stop('k must be positive.')\n  }\n\n  index.ls <- rTree$rTreeCpp$knn_list(y, k)\n\n  return(index.ls)\n}\n\n\n\n\n\n\n",
    "created" : 1488832521366.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "917430039",
    "id" : "F8958BAA",
    "lastKnownWriteTime" : 1488852484,
    "last_content_update" : 1488852484040,
    "path" : "~/Projects/rtree/rtree/R/main.R",
    "project_path" : "R/main.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}